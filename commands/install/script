#!/usr/bin/env bash

# To implement this command, edit the "Command implementation" section below.

# Usage
# -----

# Comments prefixed with `#/` are managed by stubbs.
# The `command` and `usage` comments describe the command
# and show its options.
#
#/ command: chart-mate:install: "install deis with helm"
#/ usage: rerun chart-mate:install [options]

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions, too.
. $RERUN_MODULE_DIR/lib/functions.sh install || {
  echo >&2 "Failed loading function library." ; exit 1 ;
}

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -eo pipefail

# Command variables
# -----------------

# This command script can access the following variables
# declared by `rerun` or by the option parser function.

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables:

# The `rerun_options_parse` function processes the command line
# arguments. Each accepted command line flag results in setting
# one the corresponding option variables.

rerun_options_parse "$@"

load-config

kubectl get events --all-namespaces -w > ${K8S_EVENT_LOG} 2>&1 &

helm doctor
log-info "Adding deis helm repo..."
helm repo add deis https://github.com/deis/charts.git || true

if [ -n ${BUILDER_SHA} ] then
  export "BUILDER_GIT_TAG"="git-${BUILDER_SHA:0:7}"
fi

if [ -n ${CONTROLLER_SHA} ] then
  export "CONTROLLER_GIT_TAG"="git-${CONTROLLER_SHA:0:7}"
fi

if [ -n ${DOCKERBUILDER_SHA} ] then
  export "DOCKERBUILDER_GIT_TAG"="git-${DOCKERBUILDER_SHA:0:7}"
fi

if [ -n ${FLUENTD_SHA} ] then
  export "FLUENTD_GIT_TAG"="git-${FLUENTD_SHA:0:7}"
fi

if [ -n ${LOGGER_SHA} ] then
  export "LOGGER_GIT_TAG"="git-${LOGGER_SHA:0:7}"
fi

if [ -n ${MINIO_SHA} ] then
  export "MINIO_GIT_TAG"="git-${MINIO_SHA:0:7}"
fi

if [ -n ${POSTGRES_SHA}] then
  export "POSTGRES_GIT_TAG"="git-${POSTGRES_SHA:0:7}"
fi

if [ -n ${REGISTRY_SHA}] then
  export "REGISTRY_GIT_TAG"="git-${REGISTRY_SHA:0:7}"
fi

if [ -n $ROUTER_SHA] then
  export "ROUTER_GIT_TAG"="git-${ROUTER_SHA:0:7}"
fi

if [ -n ${SLUGBUILDER_SHA}] then
  export "SLUGBUILDER_GIT_TAG"="git-${SLUGBUILDER_SHA:0:7}"
fi

if [ -n ${SLUGRUNNER_SHA} ] then
  export "SLUGRUNNER_GIT_TAG"="git-${SLUGRUNNER_SHA:0:7}"
fi

if [ -n ${WORKFLOW_E2E_SHA} ] then
  export "WORKFLOW_E2E_GIT_TAG"="git-${WORKFLOW_E2E_SHA:0:7}"
fi

helm fetch "deis/${WORKFLOW_CHART}"
helm generate "${WORKFLOW_CHART}"
helm install "${WORKFLOW_CHART}"

if [ ! -z $DEIS_LOGGER ]; then
  helm fetch deis/deis-logger
  helm install deis-logger
  # re-jigger deis-controller pods so it picks up the logger's settings
  kubectl --namespace=deis scale --replicas=0 replicationcontroller deis-controller
  kubectl --namespace=deis scale --replicas=1 replicationcontroller deis-controller
fi
